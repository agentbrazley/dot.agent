import { z } from 'zod';
export declare const AgentMetadataSchema: z.ZodObject<{
    name: z.ZodString;
    version: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    role: z.ZodOptional<z.ZodString>;
    specialization: z.ZodOptional<z.ZodString>;
    capabilities: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    coding_languages: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    frameworks: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    tools: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    technologies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    industries: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    skills: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    domains: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    languages: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    model_requirements: z.ZodOptional<z.ZodObject<{
        min_context: z.ZodOptional<z.ZodNumber>;
        max_tokens: z.ZodOptional<z.ZodNumber>;
        preferred_models: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        temperature: z.ZodOptional<z.ZodNumber>;
    }, "strict", z.ZodTypeAny, {
        min_context?: number | undefined;
        max_tokens?: number | undefined;
        preferred_models?: string[] | undefined;
        temperature?: number | undefined;
    }, {
        min_context?: number | undefined;
        max_tokens?: number | undefined;
        preferred_models?: string[] | undefined;
        temperature?: number | undefined;
    }>>;
    parameters: z.ZodOptional<z.ZodObject<{
        max_iterations: z.ZodOptional<z.ZodNumber>;
        confidence_threshold: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodAny, z.objectOutputType<{
        max_iterations: z.ZodOptional<z.ZodNumber>;
        confidence_threshold: z.ZodOptional<z.ZodNumber>;
    }, z.ZodAny, "strip">, z.objectInputType<{
        max_iterations: z.ZodOptional<z.ZodNumber>;
        confidence_threshold: z.ZodOptional<z.ZodNumber>;
    }, z.ZodAny, "strip">>>;
    author: z.ZodOptional<z.ZodString>;
    organization: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    license: z.ZodOptional<z.ZodString>;
    created: z.ZodOptional<z.ZodString>;
    updated: z.ZodOptional<z.ZodString>;
    maintainers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    keywords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    category: z.ZodOptional<z.ZodString>;
    subcategory: z.ZodOptional<z.ZodString>;
    use_cases: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    difficulty: z.ZodOptional<z.ZodEnum<["beginner", "intermediate", "advanced"]>>;
    dependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    integrations: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    apis: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    requires_internet: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    version?: string | undefined;
    description?: string | undefined;
    role?: string | undefined;
    specialization?: string | undefined;
    capabilities?: string[] | undefined;
    coding_languages?: string[] | undefined;
    frameworks?: string[] | undefined;
    tools?: string[] | undefined;
    technologies?: string[] | undefined;
    industries?: string[] | undefined;
    skills?: string[] | undefined;
    domains?: string[] | undefined;
    languages?: string[] | undefined;
    model_requirements?: {
        min_context?: number | undefined;
        max_tokens?: number | undefined;
        preferred_models?: string[] | undefined;
        temperature?: number | undefined;
    } | undefined;
    parameters?: z.objectOutputType<{
        max_iterations: z.ZodOptional<z.ZodNumber>;
        confidence_threshold: z.ZodOptional<z.ZodNumber>;
    }, z.ZodAny, "strip"> | undefined;
    author?: string | undefined;
    organization?: string | undefined;
    email?: string | undefined;
    license?: string | undefined;
    created?: string | undefined;
    updated?: string | undefined;
    maintainers?: string[] | undefined;
    tags?: string[] | undefined;
    keywords?: string[] | undefined;
    category?: string | undefined;
    subcategory?: string | undefined;
    use_cases?: string[] | undefined;
    difficulty?: "beginner" | "intermediate" | "advanced" | undefined;
    dependencies?: string[] | undefined;
    integrations?: string[] | undefined;
    apis?: string[] | undefined;
    requires_internet?: boolean | undefined;
}, {
    name: string;
    version?: string | undefined;
    description?: string | undefined;
    role?: string | undefined;
    specialization?: string | undefined;
    capabilities?: string[] | undefined;
    coding_languages?: string[] | undefined;
    frameworks?: string[] | undefined;
    tools?: string[] | undefined;
    technologies?: string[] | undefined;
    industries?: string[] | undefined;
    skills?: string[] | undefined;
    domains?: string[] | undefined;
    languages?: string[] | undefined;
    model_requirements?: {
        min_context?: number | undefined;
        max_tokens?: number | undefined;
        preferred_models?: string[] | undefined;
        temperature?: number | undefined;
    } | undefined;
    parameters?: z.objectInputType<{
        max_iterations: z.ZodOptional<z.ZodNumber>;
        confidence_threshold: z.ZodOptional<z.ZodNumber>;
    }, z.ZodAny, "strip"> | undefined;
    author?: string | undefined;
    organization?: string | undefined;
    email?: string | undefined;
    license?: string | undefined;
    created?: string | undefined;
    updated?: string | undefined;
    maintainers?: string[] | undefined;
    tags?: string[] | undefined;
    keywords?: string[] | undefined;
    category?: string | undefined;
    subcategory?: string | undefined;
    use_cases?: string[] | undefined;
    difficulty?: "beginner" | "intermediate" | "advanced" | undefined;
    dependencies?: string[] | undefined;
    integrations?: string[] | undefined;
    apis?: string[] | undefined;
    requires_internet?: boolean | undefined;
}>;
export declare const AgentFrontmatterSchema: z.ZodObject<{
    agent: z.ZodObject<{
        name: z.ZodString;
        version: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        role: z.ZodOptional<z.ZodString>;
        specialization: z.ZodOptional<z.ZodString>;
        capabilities: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        coding_languages: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        frameworks: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        tools: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        technologies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        industries: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        skills: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        domains: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        languages: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        model_requirements: z.ZodOptional<z.ZodObject<{
            min_context: z.ZodOptional<z.ZodNumber>;
            max_tokens: z.ZodOptional<z.ZodNumber>;
            preferred_models: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            temperature: z.ZodOptional<z.ZodNumber>;
        }, "strict", z.ZodTypeAny, {
            min_context?: number | undefined;
            max_tokens?: number | undefined;
            preferred_models?: string[] | undefined;
            temperature?: number | undefined;
        }, {
            min_context?: number | undefined;
            max_tokens?: number | undefined;
            preferred_models?: string[] | undefined;
            temperature?: number | undefined;
        }>>;
        parameters: z.ZodOptional<z.ZodObject<{
            max_iterations: z.ZodOptional<z.ZodNumber>;
            confidence_threshold: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodAny, z.objectOutputType<{
            max_iterations: z.ZodOptional<z.ZodNumber>;
            confidence_threshold: z.ZodOptional<z.ZodNumber>;
        }, z.ZodAny, "strip">, z.objectInputType<{
            max_iterations: z.ZodOptional<z.ZodNumber>;
            confidence_threshold: z.ZodOptional<z.ZodNumber>;
        }, z.ZodAny, "strip">>>;
        author: z.ZodOptional<z.ZodString>;
        organization: z.ZodOptional<z.ZodString>;
        email: z.ZodOptional<z.ZodString>;
        license: z.ZodOptional<z.ZodString>;
        created: z.ZodOptional<z.ZodString>;
        updated: z.ZodOptional<z.ZodString>;
        maintainers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        keywords: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        category: z.ZodOptional<z.ZodString>;
        subcategory: z.ZodOptional<z.ZodString>;
        use_cases: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        difficulty: z.ZodOptional<z.ZodEnum<["beginner", "intermediate", "advanced"]>>;
        dependencies: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        integrations: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        apis: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        requires_internet: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        version?: string | undefined;
        description?: string | undefined;
        role?: string | undefined;
        specialization?: string | undefined;
        capabilities?: string[] | undefined;
        coding_languages?: string[] | undefined;
        frameworks?: string[] | undefined;
        tools?: string[] | undefined;
        technologies?: string[] | undefined;
        industries?: string[] | undefined;
        skills?: string[] | undefined;
        domains?: string[] | undefined;
        languages?: string[] | undefined;
        model_requirements?: {
            min_context?: number | undefined;
            max_tokens?: number | undefined;
            preferred_models?: string[] | undefined;
            temperature?: number | undefined;
        } | undefined;
        parameters?: z.objectOutputType<{
            max_iterations: z.ZodOptional<z.ZodNumber>;
            confidence_threshold: z.ZodOptional<z.ZodNumber>;
        }, z.ZodAny, "strip"> | undefined;
        author?: string | undefined;
        organization?: string | undefined;
        email?: string | undefined;
        license?: string | undefined;
        created?: string | undefined;
        updated?: string | undefined;
        maintainers?: string[] | undefined;
        tags?: string[] | undefined;
        keywords?: string[] | undefined;
        category?: string | undefined;
        subcategory?: string | undefined;
        use_cases?: string[] | undefined;
        difficulty?: "beginner" | "intermediate" | "advanced" | undefined;
        dependencies?: string[] | undefined;
        integrations?: string[] | undefined;
        apis?: string[] | undefined;
        requires_internet?: boolean | undefined;
    }, {
        name: string;
        version?: string | undefined;
        description?: string | undefined;
        role?: string | undefined;
        specialization?: string | undefined;
        capabilities?: string[] | undefined;
        coding_languages?: string[] | undefined;
        frameworks?: string[] | undefined;
        tools?: string[] | undefined;
        technologies?: string[] | undefined;
        industries?: string[] | undefined;
        skills?: string[] | undefined;
        domains?: string[] | undefined;
        languages?: string[] | undefined;
        model_requirements?: {
            min_context?: number | undefined;
            max_tokens?: number | undefined;
            preferred_models?: string[] | undefined;
            temperature?: number | undefined;
        } | undefined;
        parameters?: z.objectInputType<{
            max_iterations: z.ZodOptional<z.ZodNumber>;
            confidence_threshold: z.ZodOptional<z.ZodNumber>;
        }, z.ZodAny, "strip"> | undefined;
        author?: string | undefined;
        organization?: string | undefined;
        email?: string | undefined;
        license?: string | undefined;
        created?: string | undefined;
        updated?: string | undefined;
        maintainers?: string[] | undefined;
        tags?: string[] | undefined;
        keywords?: string[] | undefined;
        category?: string | undefined;
        subcategory?: string | undefined;
        use_cases?: string[] | undefined;
        difficulty?: "beginner" | "intermediate" | "advanced" | undefined;
        dependencies?: string[] | undefined;
        integrations?: string[] | undefined;
        apis?: string[] | undefined;
        requires_internet?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    agent: {
        name: string;
        version?: string | undefined;
        description?: string | undefined;
        role?: string | undefined;
        specialization?: string | undefined;
        capabilities?: string[] | undefined;
        coding_languages?: string[] | undefined;
        frameworks?: string[] | undefined;
        tools?: string[] | undefined;
        technologies?: string[] | undefined;
        industries?: string[] | undefined;
        skills?: string[] | undefined;
        domains?: string[] | undefined;
        languages?: string[] | undefined;
        model_requirements?: {
            min_context?: number | undefined;
            max_tokens?: number | undefined;
            preferred_models?: string[] | undefined;
            temperature?: number | undefined;
        } | undefined;
        parameters?: z.objectOutputType<{
            max_iterations: z.ZodOptional<z.ZodNumber>;
            confidence_threshold: z.ZodOptional<z.ZodNumber>;
        }, z.ZodAny, "strip"> | undefined;
        author?: string | undefined;
        organization?: string | undefined;
        email?: string | undefined;
        license?: string | undefined;
        created?: string | undefined;
        updated?: string | undefined;
        maintainers?: string[] | undefined;
        tags?: string[] | undefined;
        keywords?: string[] | undefined;
        category?: string | undefined;
        subcategory?: string | undefined;
        use_cases?: string[] | undefined;
        difficulty?: "beginner" | "intermediate" | "advanced" | undefined;
        dependencies?: string[] | undefined;
        integrations?: string[] | undefined;
        apis?: string[] | undefined;
        requires_internet?: boolean | undefined;
    };
}, {
    agent: {
        name: string;
        version?: string | undefined;
        description?: string | undefined;
        role?: string | undefined;
        specialization?: string | undefined;
        capabilities?: string[] | undefined;
        coding_languages?: string[] | undefined;
        frameworks?: string[] | undefined;
        tools?: string[] | undefined;
        technologies?: string[] | undefined;
        industries?: string[] | undefined;
        skills?: string[] | undefined;
        domains?: string[] | undefined;
        languages?: string[] | undefined;
        model_requirements?: {
            min_context?: number | undefined;
            max_tokens?: number | undefined;
            preferred_models?: string[] | undefined;
            temperature?: number | undefined;
        } | undefined;
        parameters?: z.objectInputType<{
            max_iterations: z.ZodOptional<z.ZodNumber>;
            confidence_threshold: z.ZodOptional<z.ZodNumber>;
        }, z.ZodAny, "strip"> | undefined;
        author?: string | undefined;
        organization?: string | undefined;
        email?: string | undefined;
        license?: string | undefined;
        created?: string | undefined;
        updated?: string | undefined;
        maintainers?: string[] | undefined;
        tags?: string[] | undefined;
        keywords?: string[] | undefined;
        category?: string | undefined;
        subcategory?: string | undefined;
        use_cases?: string[] | undefined;
        difficulty?: "beginner" | "intermediate" | "advanced" | undefined;
        dependencies?: string[] | undefined;
        integrations?: string[] | undefined;
        apis?: string[] | undefined;
        requires_internet?: boolean | undefined;
    };
}>;
export type AgentMetadata = z.infer<typeof AgentMetadataSchema>;
export type AgentFrontmatter = z.infer<typeof AgentFrontmatterSchema>;
//# sourceMappingURL=schema.d.ts.map